#include <catch.hpp>

#include "aes_siv.h"

#include <vector>

static void test_siv_encryption(const void* key,
                                size_t key_len,
                                const void* header,
                                size_t header_len,
                                const void* plaintext,
                                const void* ciphertext,
                                size_t text_len,
                                const void* siv)
{
    securefs::AES_SIV aes_siv(key, key_len);
    std::vector<byte> our_ciphertext(text_len + 16);
    aes_siv.encrypt_and_authenticate(
        plaintext, text_len, header, header_len, our_ciphertext.data(), our_ciphertext.size());
    REQUIRE(memcmp(siv, our_ciphertext.data(), 16) == 0);
    REQUIRE(memcmp(ciphertext, our_ciphertext.data() + 16, text_len) == 0);
}

static void test_siv_decryption(const void* key,
                                size_t key_len,
                                const void* header,
                                size_t header_len,
                                const void* plaintext,
                                const void* ciphertext,
                                size_t text_len,
                                const void* siv)
{
    securefs::AES_SIV aes_siv(key, key_len);
    std::vector<byte> our_ciphertext(text_len + 16);
    memcpy(our_ciphertext.data(), siv, 16);
    memcpy(our_ciphertext.data() + 16, ciphertext, text_len);
    std::vector<byte> our_plaintext(text_len);
    REQUIRE(aes_siv.decrypt_and_verify(our_ciphertext.data(),
                                       our_ciphertext.size(),
                                       header,
                                       header_len,
                                       our_plaintext.data(),
                                       our_plaintext.size()));
    REQUIRE(memcmp(our_plaintext.data(), plaintext, text_len) == 0);
}

static void test_siv_all(const void* key,
                         size_t key_len,
                         const void* header,
                         size_t header_len,
                         const void* plaintext,
                         const void* ciphertext,
                         size_t text_len,
                         const void* siv)
{
    test_siv_encryption(key, key_len, header, header_len, plaintext, ciphertext, text_len, siv);
    test_siv_decryption(key, key_len, header, header_len, plaintext, ciphertext, text_len, siv);
}

TEST_CASE("Test SIV RFC")
{
    const byte key[] = {0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5,
                        0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5,
                        0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};
    const byte ad[] = {0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
                       0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27};
    const byte plaintext[]
        = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee};
    const byte siv[] = {0x85,
                        0x63,
                        0x2d,
                        0x7,
                        0xc6,
                        0xe8,
                        0xf3,
                        0x7f,
                        0x95,
                        0xa,
                        0xcd,
                        0x32,
                        0xa,
                        0x2e,
                        0xcc,
                        0x93};
    const byte ciphertext[]
        = {0x40, 0xc0, 0x2b, 0x96, 0x90, 0xc4, 0xdc, 0x4, 0xda, 0xef, 0x7f, 0x6a, 0xfe, 0x5c};

    test_siv_all(key, sizeof(key), ad, sizeof(ad), plaintext, ciphertext, sizeof(plaintext), siv);
}

TEST_CASE("Test SIV")
{
    // The following AES-256 SIV tests come from:
    // http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/siv/siv-test-vectors.txt

    const byte siv1_key[64]
        = {0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3,
           0xf2, 0xf1, 0xf0, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66,
           0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
           0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03,
           0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
    const byte siv1_h1[24]
        = {0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
           0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27};
    const byte siv1_plaintext[14]
        = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee};
    const byte siv1_iv[16] = {0xf1,
                              0x25,
                              0x27,
                              0x4c,
                              0x59,
                              0x80,
                              0x65,
                              0xcf,
                              0xc2,
                              0x6b,
                              0x0e,
                              0x71,
                              0x57,
                              0x50,
                              0x29,
                              0x08};
    const byte siv1_ciphertext[14]
        = {0x8b, 0x03, 0x52, 0x17, 0xe3, 0x80, 0xca, 0xc8, 0x91, 0x9e, 0xe8, 0x00, 0xc1, 0x26};
    const byte siv2_key[64]
        = {0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73,
           0x72, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66,
           0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,
           0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53,
           0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5b, 0x5d, 0x5e, 0x5f};
    const byte siv2_h1[40]
        = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd,
           0xee, 0xff, 0xde, 0xad, 0xda, 0xda, 0xde, 0xad, 0xda, 0xda, 0xff, 0xee, 0xdd, 0xcc,
           0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00};
    const byte siv2_h2[10] = {0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0};
    const byte siv2_h3[16] = {0x09,
                              0xf9,
                              0x11,
                              0x02,
                              0x9d,
                              0x74,
                              0xe3,
                              0x5b,
                              0xd8,
                              0x41,
                              0x56,
                              0xc5,
                              0x63,
                              0x56,
                              0x88,
                              0xc0};
    const byte siv2_plaintext[47]
        = {0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73, 0x6f, 0x6d, 0x65,
           0x20, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x74,
           0x6f, 0x20, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x20, 0x75, 0x73,
           0x69, 0x6e, 0x67, 0x20, 0x53, 0x49, 0x56, 0x2d, 0x41, 0x45, 0x53};
    const byte siv2_iv[16] = {0x85,
                              0xb8,
                              0x16,
                              0x73,
                              0x10,
                              0x03,
                              0x8d,
                              0xb7,
                              0xdc,
                              0x46,
                              0x92,
                              0xc0,
                              0x28,
                              0x1c,
                              0xa3,
                              0x58};
    const byte siv2_ciphertext[47]
        = {0x68, 0x18, 0x1b, 0x27, 0x62, 0xf3, 0xc2, 0x4f, 0x2e, 0xfa, 0x5f, 0xb8,
           0x0c, 0xb1, 0x43, 0x51, 0x6c, 0xe6, 0xc4, 0x34, 0xb8, 0x98, 0xa6, 0xfd,
           0x8e, 0xb9, 0x8a, 0x41, 0x88, 0x42, 0xf5, 0x1f, 0x66, 0xfc, 0x67, 0xde,
           0x43, 0xac, 0x18, 0x5a, 0x66, 0xdd, 0x72, 0x47, 0x5b, 0xbb, 0x08};

    test_siv_all(siv1_key,
                 sizeof(siv1_key),
                 siv1_h1,
                 sizeof(siv1_h1),
                 siv1_plaintext,
                 siv2_ciphertext,
                 sizeof(siv1_plaintext),
                 siv1_iv);
}

TEST_CASE("Test CTR")
{
    const byte ciphertext[]
        = {0x22, 0x1d, 0xf9, 0x13, 0xf, 0xe, 0x5, 0xe7, 0xe8, 0x7c, 0x89, 0xee, 0x6a};
    const byte iv[] = {0x37,
                       0xc6,
                       0xd2,
                       0x2f,
                       0xad,
                       0xe2,
                       0x2b,
                       0x2d,
                       0x92,
                       0x45,
                       0x98,
                       0xbe,
                       0xe2,
                       0x45,
                       0x5e,
                       0xfc};
    const byte null_iv[16] = {0};
    const byte key[] = {0x7d,
                        0x9b,
                        0xb7,
                        0x22,
                        0xda,
                        0x2d,
                        0xc8,
                        0x67,
                        0x4e,
                        0x8,
                        0xc3,
                        0xd4,
                        0x4a,
                        0xae,
                        0x97,
                        0x6f};
    char plaintext[sizeof(ciphertext) + 1] = {0};

    CryptoPP::CTR_Mode<CryptoPP::AES>::Encryption enc(key, sizeof(key), null_iv);
    enc.Resynchronize(iv, sizeof(iv));
    enc.ProcessData(reinterpret_cast<byte*>(plaintext), ciphertext, sizeof(ciphertext));
    REQUIRE(strcmp(plaintext, "CTR Mode Test") == 0);
}
